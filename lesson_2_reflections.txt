version 2 of my lesson2 answers (OSX Version - 04/18/15)

1- What happens when you initialize a repository? Why do you need to do it?
ALREADY answered

2- How is the staging area different from the working directory and the repository? What value do you think it offers?
ALREADY answered

3- How can you use the staging area to make sure you have one commit per logical change?
We can add to staging area just the files that have the logical change that we made.
We can also keep the others changes in the working directory also, and we don't add it to the staging area until we commit this first change.

4- What are some situations when branches would be helpful in keeping your history organized? How would branches help?
When we wanted try something in parallel with the main version of our code. Like a experimental version or a huge alteration. That way we create different paths in the development process.

5- How do the diagrams help you visualize the branch structure?
Diagrams are a great tool to help the team see the 'whole picture' of the repo. It help us to track all the branches in a easy way. We can also plan ahead merges and branching situations.
In managing projects this could be a nice tool to use.

6- What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
The two branches becomes one. And the other could be deleted (the label, not the commits under it).
In the diagram we represent the line of the merged branch going back to both the old commits because we can reach then both from the recent merged branch.


------------
Notes from lesson 2:

Reachability - When we call the command "git log" on a branch, we see the all the commits in that branch (the most recent ones at the top).
There could be cases when commits couldn't be 'reached' trough these logs.

git branch -d branch_name
Deletes the ONLY THE LABEL of that branch, not the commits. ATTENTION that the commits could become unreachable after that.